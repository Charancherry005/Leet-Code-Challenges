Prob 2 - Remove Nth Node 

Remove Nth Node from end of list

Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz 

/-------------------------------------------------------------------------------------------------/ 

Solution: 

class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        
        dummy = ListNode(0, head) 
        left = dummy 
        right = head 
        
        while n> 0 and right: 
            right=right.next 
            n-=1 
            
        while right: 
            left=left.next 
            right=right.next 
            
        left.next = left.next.next 
        return dummy.next 

/-------------------------------------------------------------------------------------------------/ 

Quick explanation: 

point the dummy to the head of the list 
remember:  you don't have to reverse the list 
Time complexity: O(n) 

just have two pointers 
move the right pointer with N value until n becomes zero 
now move the right and left pointer exactly by 'n' until right pointer becomes 'null' 
if right pointer is at 'null' then the left pointer will be at the value that needs to be deleted 
just delete the node which is pointed by left pointer 



